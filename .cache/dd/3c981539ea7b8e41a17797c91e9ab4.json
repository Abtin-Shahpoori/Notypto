{"id":"tczu","dependencies":[{"name":"/home/abtin/Desktop/Pinote/package.json","includedInParent":true,"mtime":1632426853264},{"name":"/home/abtin/Desktop/Pinote/node_modules/refractor/package.json","includedInParent":true,"mtime":1632151213327}],"generated":{"js":"\"use strict\";function e(e){e.languages.haskell={comment:{pattern:/(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|$)|\\{-[\\s\\S]*?-\\})/m,lookbehind:!0},char:{pattern:/'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,alias:\"string\"},string:{pattern:/\"(?:[^\\\\\"]|\\\\(?:\\S|\\s+\\\\))*\"/,greedy:!0},keyword:/\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\"import-statement\":{pattern:/(^[\\t ]*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,lookbehind:!0,inside:{keyword:/\\b(?:import|qualified|as|hiding)\\b/}},builtin:/\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,number:/\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,operator:/\\s\\.\\s|[-!#$%*+=?&@|~:<>^\\\\\\/]*\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+|[-!#$%*+=?&@|~.:<>^\\\\\\/]+\\.[-!#$%*+=?&@|~:<>^\\\\\\/]*|[-!#$%*+=?&@|~:<>^\\\\\\/]+|`(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*`/,hvariable:/\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*\\b/,constant:/\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*\\b/,punctuation:/[{}[\\];(),.:]/},e.languages.hs=e.languages.haskell}module.exports=e,e.displayName=\"haskell\",e.aliases=[\"hs\"];"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":6,"column":0},"generated":{"line":1,"column":13}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":6,"column":0},"generated":{"line":1,"column":22}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":6,"column":0},"generated":{"line":1,"column":24}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":7,"column":0},"generated":{"line":1,"column":27}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":7,"column":0},"generated":{"line":1,"column":29}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":7,"column":0},"generated":{"line":1,"column":39}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":7,"column":0},"generated":{"line":1,"column":47}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":8,"column":0},"generated":{"line":1,"column":48}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":8,"column":0},"generated":{"line":1,"column":56}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":9,"column":0},"generated":{"line":1,"column":57}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":10,"column":0},"generated":{"line":1,"column":65}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":11,"column":0},"generated":{"line":1,"column":157}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":11,"column":0},"generated":{"line":1,"column":169}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":13,"column":0},"generated":{"line":1,"column":172}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":13,"column":0},"generated":{"line":1,"column":177}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":14,"column":0},"generated":{"line":1,"column":178}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":15,"column":0},"generated":{"line":1,"column":186}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":16,"column":0},"generated":{"line":1,"column":384}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":16,"column":0},"generated":{"line":1,"column":390}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":18,"column":0},"generated":{"line":1,"column":400}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":18,"column":0},"generated":{"line":1,"column":407}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":19,"column":0},"generated":{"line":1,"column":408}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":19,"column":0},"generated":{"line":1,"column":416}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":20,"column":0},"generated":{"line":1,"column":447}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":20,"column":0},"generated":{"line":1,"column":455}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":22,"column":0},"generated":{"line":1,"column":458}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":23,"column":0},"generated":{"line":1,"column":466}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":24,"column":0},"generated":{"line":1,"column":586}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":24,"column":0},"generated":{"line":1,"column":605}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":28,"column":0},"generated":{"line":1,"column":606}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":29,"column":0},"generated":{"line":1,"column":614}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":30,"column":0},"generated":{"line":1,"column":748}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":30,"column":0},"generated":{"line":1,"column":760}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":31,"column":0},"generated":{"line":1,"column":762}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":31,"column":0},"generated":{"line":1,"column":769}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":32,"column":0},"generated":{"line":1,"column":770}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":32,"column":0},"generated":{"line":1,"column":778}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":36,"column":0},"generated":{"line":1,"column":817}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":37,"column":0},"generated":{"line":1,"column":825}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":39,"column":0},"generated":{"line":1,"column":2498}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":39,"column":0},"generated":{"line":1,"column":2505}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":45,"column":0},"generated":{"line":1,"column":2565}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":46,"column":0},"generated":{"line":1,"column":2574}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":48,"column":0},"generated":{"line":1,"column":2745}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":48,"column":0},"generated":{"line":1,"column":2755}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":49,"column":0},"generated":{"line":1,"column":2792}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":49,"column":0},"generated":{"line":1,"column":2801}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":50,"column":0},"generated":{"line":1,"column":2837}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":50,"column":0},"generated":{"line":1,"column":2849}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":52,"column":0},"generated":{"line":1,"column":2866}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":52,"column":0},"generated":{"line":1,"column":2868}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":52,"column":0},"generated":{"line":1,"column":2878}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":52,"column":0},"generated":{"line":1,"column":2881}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":52,"column":0},"generated":{"line":1,"column":2883}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":52,"column":0},"generated":{"line":1,"column":2893}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":3,"column":0},"generated":{"line":1,"column":2901}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":3,"column":0},"generated":{"line":1,"column":2908}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":3,"column":0},"generated":{"line":1,"column":2916}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":4,"column":0},"generated":{"line":1,"column":2918}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":4,"column":0},"generated":{"line":1,"column":2920}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":4,"column":0},"generated":{"line":1,"column":2932}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":5,"column":0},"generated":{"line":1,"column":2942}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":5,"column":0},"generated":{"line":1,"column":2944}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":5,"column":0},"generated":{"line":1,"column":2952}},{"source":"../../node_modules/refractor/lang/haskell.js","original":{"line":5,"column":0},"generated":{"line":1,"column":2953}}],"sources":{"../../node_modules/refractor/lang/haskell.js":"'use strict'\n\nmodule.exports = haskell\nhaskell.displayName = 'haskell'\nhaskell.aliases = ['hs']\nfunction haskell(Prism) {\n  Prism.languages.haskell = {\n    comment: {\n      pattern:\n        /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|$)|\\{-[\\s\\S]*?-\\})/m,\n      lookbehind: true\n    },\n    char: {\n      pattern:\n        /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,\n      alias: 'string'\n    },\n    string: {\n      pattern: /\"(?:[^\\\\\"]|\\\\(?:\\S|\\s+\\\\))*\"/,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\n    'import-statement': {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern:\n        /(^[\\t ]*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n      lookbehind: true,\n      inside: {\n        keyword: /\\b(?:import|qualified|as|hiding)\\b/\n      }\n    },\n    // These are builtin variables only. Constructors are highlighted later as a constant.\n    builtin:\n      /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,\n    // decimal integers and floating point numbers | octal integers | hexadecimal integers\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,\n    // Most of this is needed because of the meaning of a single '.'.\n    // If it stands alone freely, it is the function composition.\n    // It may also be a separator between a module name and an identifier => no\n    // operator. If it comes together with other special characters it is an\n    // operator too.\n    operator:\n      /\\s\\.\\s|[-!#$%*+=?&@|~:<>^\\\\\\/]*\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+|[-!#$%*+=?&@|~.:<>^\\\\\\/]+\\.[-!#$%*+=?&@|~:<>^\\\\\\/]*|[-!#$%*+=?&@|~:<>^\\\\\\/]+|`(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*`/,\n    // In Haskell, nearly everything is a variable, do not highlight these.\n    hvariable: /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*\\b/,\n    constant: /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*\\b/,\n    punctuation: /[{}[\\];(),.:]/\n  }\n  Prism.languages.hs = Prism.languages.haskell\n}\n"},"lineCount":null}},"error":null,"hash":"6826578898b92502480718b4c98911c2","cacheData":{"env":{}}}