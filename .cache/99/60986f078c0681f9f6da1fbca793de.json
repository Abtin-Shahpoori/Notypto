{"id":"../../node_modules/refractor/lang/cpp.js","dependencies":[{"name":"/home/abtin/Desktop/Pinote/package.json","includedInParent":true,"mtime":1632153636934},{"name":"/home/abtin/Desktop/Pinote/node_modules/refractor/package.json","includedInParent":true,"mtime":1632151213327},{"name":"./c.js","loc":{"line":2,"column":25},"parent":"/home/abtin/Desktop/Pinote/node_modules/refractor/lang/cpp.js","resolved":"/home/abtin/Desktop/Pinote/node_modules/refractor/lang/c.js"}],"generated":{"js":"'use strict'\nvar refractorC = require('./c.js')\nmodule.exports = cpp\ncpp.displayName = 'cpp'\ncpp.aliases = []\nfunction cpp(Prism) {\n  Prism.register(refractorC)\n  ;(function (Prism) {\n    var keyword =\n      /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/\n    var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(\n      /<keyword>/g,\n      function () {\n        return keyword.source\n      }\n    )\n    Prism.languages.cpp = Prism.languages.extend('c', {\n      'class-name': [\n        {\n          pattern: RegExp(\n            /(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(\n              /<keyword>/g,\n              function () {\n                return keyword.source\n              }\n            )\n          ),\n          lookbehind: true\n        }, // This is intended to capture the class name of method implementations like:\n        //   void foo::bar() const {}\n        // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n        // it starts with an uppercase letter. This approximation should give decent results.\n        /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n        //   Foo::~Foo() {}\n        /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n        // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n        /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/\n      ],\n      keyword: keyword,\n      number: {\n        pattern:\n          /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n        greedy: true\n      },\n      operator:\n        />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n      boolean: /\\b(?:true|false)\\b/\n    })\n    Prism.languages.insertBefore('cpp', 'string', {\n      module: {\n        // https://en.cppreference.com/w/cpp/language/modules\n        pattern: RegExp(\n          /(\\b(?:module|import)\\s+)/.source +\n            '(?:' + // header-name\n            /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source +\n            '|' + // module name or partition or both\n            /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(\n              /<mod-name>/g,\n              function () {\n                return modName\n              }\n            ) +\n            ')'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          string: /^[<\"][\\s\\S]+/,\n          operator: /:/,\n          punctuation: /\\./\n        }\n      },\n      'raw-string': {\n        pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n        alias: 'string',\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'keyword', {\n      'generic-function': {\n        pattern: /\\b[a-z_]\\w*\\s*<(?:[^<>]|<(?:[^<>])*>)*>(?=\\s*\\()/i,\n        inside: {\n          function: /^\\w+/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            alias: 'class-name',\n            inside: Prism.languages.cpp\n          }\n        }\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'class-name', {\n      // the base clause is an optional list of parent classes\n      // https://en.cppreference.com/w/cpp/language/class\n      'base-clause': {\n        pattern:\n          /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n        lookbehind: true,\n        greedy: true,\n        inside: Prism.languages.extend('cpp', {})\n      }\n    })\n    Prism.languages.insertBefore(\n      'inside',\n      'double-colon',\n      {\n        // All untokenized words that are not namespaces should be class names\n        'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n      },\n      Prism.languages.cpp['base-clause']\n    )\n  })(Prism)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../../node_modules/refractor/lang/cpp.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}}],"sources":{"../../node_modules/refractor/lang/cpp.js":"'use strict'\nvar refractorC = require('./c.js')\nmodule.exports = cpp\ncpp.displayName = 'cpp'\ncpp.aliases = []\nfunction cpp(Prism) {\n  Prism.register(refractorC)\n  ;(function (Prism) {\n    var keyword =\n      /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/\n    var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(\n      /<keyword>/g,\n      function () {\n        return keyword.source\n      }\n    )\n    Prism.languages.cpp = Prism.languages.extend('c', {\n      'class-name': [\n        {\n          pattern: RegExp(\n            /(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(\n              /<keyword>/g,\n              function () {\n                return keyword.source\n              }\n            )\n          ),\n          lookbehind: true\n        }, // This is intended to capture the class name of method implementations like:\n        //   void foo::bar() const {}\n        // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n        // it starts with an uppercase letter. This approximation should give decent results.\n        /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n        //   Foo::~Foo() {}\n        /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n        // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n        /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/\n      ],\n      keyword: keyword,\n      number: {\n        pattern:\n          /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n        greedy: true\n      },\n      operator:\n        />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n      boolean: /\\b(?:true|false)\\b/\n    })\n    Prism.languages.insertBefore('cpp', 'string', {\n      module: {\n        // https://en.cppreference.com/w/cpp/language/modules\n        pattern: RegExp(\n          /(\\b(?:module|import)\\s+)/.source +\n            '(?:' + // header-name\n            /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source +\n            '|' + // module name or partition or both\n            /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(\n              /<mod-name>/g,\n              function () {\n                return modName\n              }\n            ) +\n            ')'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          string: /^[<\"][\\s\\S]+/,\n          operator: /:/,\n          punctuation: /\\./\n        }\n      },\n      'raw-string': {\n        pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n        alias: 'string',\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'keyword', {\n      'generic-function': {\n        pattern: /\\b[a-z_]\\w*\\s*<(?:[^<>]|<(?:[^<>])*>)*>(?=\\s*\\()/i,\n        inside: {\n          function: /^\\w+/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            alias: 'class-name',\n            inside: Prism.languages.cpp\n          }\n        }\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'class-name', {\n      // the base clause is an optional list of parent classes\n      // https://en.cppreference.com/w/cpp/language/class\n      'base-clause': {\n        pattern:\n          /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n        lookbehind: true,\n        greedy: true,\n        inside: Prism.languages.extend('cpp', {})\n      }\n    })\n    Prism.languages.insertBefore(\n      'inside',\n      'double-colon',\n      {\n        // All untokenized words that are not namespaces should be class names\n        'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n      },\n      Prism.languages.cpp['base-clause']\n    )\n  })(Prism)\n}\n"},"lineCount":120}},"error":null,"hash":"a54f8e29a36f66642fdca48a60b19f43","cacheData":{"env":{}}}