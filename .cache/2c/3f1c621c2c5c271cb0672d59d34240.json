{"id":"../../node_modules/refractor/lang/tsx.js","dependencies":[{"name":"/home/abtin/Desktop/Pinote/package.json","includedInParent":true,"mtime":1632551681475},{"name":"/home/abtin/Desktop/Pinote/node_modules/refractor/package.json","includedInParent":true,"mtime":1632151213327},{"name":"./jsx.js","loc":{"line":2,"column":27},"parent":"/home/abtin/Desktop/Pinote/node_modules/refractor/lang/tsx.js","resolved":"/home/abtin/Desktop/Pinote/node_modules/refractor/lang/jsx.js"},{"name":"./typescript.js","loc":{"line":3,"column":34},"parent":"/home/abtin/Desktop/Pinote/node_modules/refractor/lang/tsx.js","resolved":"/home/abtin/Desktop/Pinote/node_modules/refractor/lang/typescript.js"}],"generated":{"js":"'use strict'\nvar refractorJsx = require('./jsx.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = tsx\ntsx.displayName = 'tsx'\ntsx.aliases = []\nfunction tsx(Prism) {\n  Prism.register(refractorJsx)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript)\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript) // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n    var tag = Prism.languages.tsx.tag\n    tag.pattern = RegExp(\n      /(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')',\n      tag.pattern.flags\n    )\n    tag.lookbehind = true\n  })(Prism)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/refractor/lang/tsx.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}}],"sources":{"../../node_modules/refractor/lang/tsx.js":"'use strict'\nvar refractorJsx = require('./jsx.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = tsx\ntsx.displayName = 'tsx'\ntsx.aliases = []\nfunction tsx(Prism) {\n  Prism.register(refractorJsx)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript)\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript) // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n    var tag = Prism.languages.tsx.tag\n    tag.pattern = RegExp(\n      /(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')',\n      tag.pattern.flags\n    )\n    tag.lookbehind = true\n  })(Prism)\n}\n"},"lineCount":23}},"error":null,"hash":"ad9e0d14b1ecf7b823bec9a913b930c0","cacheData":{"env":{}}}