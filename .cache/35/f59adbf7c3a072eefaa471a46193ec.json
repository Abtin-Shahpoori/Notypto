{"id":"xXeF","dependencies":[{"name":"/home/abtin/Desktop/Pinote/package.json","includedInParent":true,"mtime":1632426853264},{"name":"/home/abtin/Desktop/Pinote/node_modules/refractor/package.json","includedInParent":true,"mtime":1632151213327}],"generated":{"js":"\"use strict\";function n(n){n.languages.prolog={comment:[/%.+/,/\\/\\*[\\s\\S]*?\\*\\//],string:{pattern:/([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},builtin:/\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,variable:/\\b[A-Z_]\\w*/,function:/\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,number:/\\b\\d+(?:\\.\\d*)?/,operator:/[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,punctuation:/[(){}\\[\\],]/}}module.exports=n,n.displayName=\"prolog\",n.aliases=[];"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":6,"column":0},"generated":{"line":1,"column":13}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":6,"column":0},"generated":{"line":1,"column":22}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":6,"column":0},"generated":{"line":1,"column":24}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":7,"column":0},"generated":{"line":1,"column":27}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":7,"column":0},"generated":{"line":1,"column":29}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":7,"column":0},"generated":{"line":1,"column":39}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":7,"column":0},"generated":{"line":1,"column":46}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":9,"column":0},"generated":{"line":1,"column":47}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":9,"column":0},"generated":{"line":1,"column":55}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":9,"column":0},"generated":{"line":1,"column":56}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":9,"column":0},"generated":{"line":1,"column":62}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":11,"column":0},"generated":{"line":1,"column":82}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":11,"column":0},"generated":{"line":1,"column":89}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":12,"column":0},"generated":{"line":1,"column":90}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":12,"column":0},"generated":{"line":1,"column":98}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":13,"column":0},"generated":{"line":1,"column":152}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":13,"column":0},"generated":{"line":1,"column":160}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":15,"column":0},"generated":{"line":1,"column":163}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":15,"column":0},"generated":{"line":1,"column":171}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":16,"column":0},"generated":{"line":1,"column":200}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":16,"column":0},"generated":{"line":1,"column":209}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":18,"column":0},"generated":{"line":1,"column":223}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":18,"column":0},"generated":{"line":1,"column":232}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":19,"column":0},"generated":{"line":1,"column":261}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":19,"column":0},"generated":{"line":1,"column":268}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":21,"column":0},"generated":{"line":1,"column":286}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":21,"column":0},"generated":{"line":1,"column":295}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":22,"column":0},"generated":{"line":1,"column":344}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":22,"column":0},"generated":{"line":1,"column":356}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":3,"column":0},"generated":{"line":1,"column":371}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":3,"column":0},"generated":{"line":1,"column":378}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":3,"column":0},"generated":{"line":1,"column":386}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":4,"column":0},"generated":{"line":1,"column":388}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":4,"column":0},"generated":{"line":1,"column":390}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":4,"column":0},"generated":{"line":1,"column":402}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":5,"column":0},"generated":{"line":1,"column":411}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":5,"column":0},"generated":{"line":1,"column":413}},{"source":"../../node_modules/refractor/lang/prolog.js","original":{"line":5,"column":0},"generated":{"line":1,"column":421}}],"sources":{"../../node_modules/refractor/lang/prolog.js":"'use strict'\n\nmodule.exports = prolog\nprolog.displayName = 'prolog'\nprolog.aliases = []\nfunction prolog(Prism) {\n  Prism.languages.prolog = {\n    // Syntax depends on the implementation\n    comment: [/%.+/, /\\/\\*[\\s\\S]*?\\*\\//],\n    // Depending on the implementation, strings may allow escaped newlines and quote-escape\n    string: {\n      pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    builtin: /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n    variable: /\\b[A-Z_]\\w*/,\n    // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\n    function: /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n    number: /\\b\\d+(?:\\.\\d*)?/,\n    // Custom operators are allowed\n    operator: /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n    punctuation: /[(){}\\[\\],]/\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"c19197c9630ff880bc4ddb8fd4bce6c6","cacheData":{"env":{}}}