{"id":"L40S","dependencies":[{"name":"/home/abtin/Desktop/Pinote/package.json","includedInParent":true,"mtime":1632426853264},{"name":"/home/abtin/Desktop/Pinote/node_modules/stringify-entities/package.json","includedInParent":true,"mtime":1632151212591}],"generated":{"js":"\"use strict\";function e(e,t,r){var o=\"&#x\"+e.toString(16).toUpperCase();return r&&t&&!/[\\dA-Fa-f]/.test(String.fromCharCode(t))?o:o+\";\"}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.toHexadecimal=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":14,"column":1},"generated":{"line":1,"column":0}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":9,"column":7},"generated":{"line":1,"column":13}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"toHexadecimal","original":{"line":9,"column":16},"generated":{"line":1,"column":22}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"code","original":{"line":9,"column":30},"generated":{"line":1,"column":24}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"next","original":{"line":9,"column":36},"generated":{"line":1,"column":26}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"omit","original":{"line":9,"column":42},"generated":{"line":1,"column":28}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"value","original":{"line":10,"column":6},"generated":{"line":1,"column":31}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"value","original":{"line":10,"column":6},"generated":{"line":1,"column":35}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":10,"column":14},"generated":{"line":1,"column":37}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"code","original":{"line":10,"column":22},"generated":{"line":1,"column":43}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"toString","original":{"line":10,"column":27},"generated":{"line":1,"column":45}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":10,"column":36},"generated":{"line":1,"column":54}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"toUpperCase","original":{"line":10,"column":40},"generated":{"line":1,"column":58}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"omit","original":{"line":11,"column":9},"generated":{"line":1,"column":72}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"omit","original":{"line":11,"column":9},"generated":{"line":1,"column":79}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"next","original":{"line":11,"column":17},"generated":{"line":1,"column":82}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":11,"column":26},"generated":{"line":1,"column":86}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"test","original":{"line":11,"column":39},"generated":{"line":1,"column":99}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"String","original":{"line":11,"column":44},"generated":{"line":1,"column":104}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"fromCharCode","original":{"line":11,"column":51},"generated":{"line":1,"column":111}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"next","original":{"line":11,"column":64},"generated":{"line":1,"column":124}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"value","original":{"line":12,"column":6},"generated":{"line":1,"column":128}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","name":"value","original":{"line":13,"column":6},"generated":{"line":1,"column":130}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":13,"column":14},"generated":{"line":1,"column":132}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":14,"column":1},"generated":{"line":1,"column":136}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":14,"column":1},"generated":{"line":1,"column":143}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":14,"column":1},"generated":{"line":1,"column":158}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":14,"column":1},"generated":{"line":1,"column":166}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":14,"column":1},"generated":{"line":1,"column":179}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":14,"column":1},"generated":{"line":1,"column":180}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":14,"column":1},"generated":{"line":1,"column":187}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":14,"column":1},"generated":{"line":1,"column":191}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":14,"column":1},"generated":{"line":1,"column":199}},{"source":"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","original":{"line":14,"column":1},"generated":{"line":1,"column":213}}],"sources":{"../../node_modules/stringify-entities/lib/util/to-hexadecimal.js":"/**\n * Transform `code` into a hexadecimal character reference.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  var value = '&#x' + code.toString(16).toUpperCase()\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n"},"lineCount":null}},"error":null,"hash":"8f6890ce16c11c6ed83c43f03456f2af","cacheData":{"env":{}}}