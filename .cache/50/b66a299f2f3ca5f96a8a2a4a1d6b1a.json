{"id":"../../node_modules/refractor/lang/coq.js","dependencies":[{"name":"/home/abtin/Desktop/Pinote/package.json","includedInParent":true,"mtime":1632153636934},{"name":"/home/abtin/Desktop/Pinote/node_modules/refractor/package.json","includedInParent":true,"mtime":1632151213327}],"generated":{"js":"'use strict'\n\nmodule.exports = coq\ncoq.displayName = 'coq'\ncoq.aliases = []\nfunction coq(Prism) {\n  ;(function (Prism) {\n    // https://github.com/coq/coq\n    var commentSource = /\\(\\*(?:[^(*]|\\((?!\\*)|\\*(?!\\))|<self>)*\\*\\)/.source\n    for (var i = 0; i < 2; i++) {\n      commentSource = commentSource.replace(/<self>/g, function () {\n        return commentSource\n      })\n    }\n    commentSource = commentSource.replace(/<self>/g, '[]')\n    Prism.languages.coq = {\n      comment: RegExp(commentSource),\n      string: {\n        pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n        greedy: true\n      },\n      attribute: [\n        {\n          pattern: RegExp(\n            /#\\[(?:[^\\](\"]|\"(?:[^\"]|\"\")*\"(?!\")|\\((?!\\*)|<comment>)*\\]/.source.replace(\n              /<comment>/g,\n              function () {\n                return commentSource\n              }\n            )\n          ),\n          greedy: true,\n          alias: 'attr-name',\n          inside: {\n            comment: RegExp(commentSource),\n            string: {\n              pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n              greedy: true\n            },\n            operator: /=/,\n            punctuation: /^#\\[|\\]$|[,()]/\n          }\n        },\n        {\n          pattern:\n            /\\b(?:Cumulative|Global|Local|Monomorphic|NonCumulative|Polymorphic|Private|Program)\\b/,\n          alias: 'attr-name'\n        }\n      ],\n      keyword:\n        /\\b(?:_|Abort|About|Add|Admit|Admitted|All|apply|Arguments|as|As|Assumptions|at|Axiom|Axioms|Back|BackTo|Backtrace|Bind|BinOp|BinOpSpec|BinRel|Blacklist|by|Canonical|Case|Cd|Check|Class|Classes|Close|Coercion|Coercions|cofix|CoFixpoint|CoInductive|Collection|Combined|Compute|Conjecture|Conjectures|Constant|Constants|Constraint|Constructors|Context|Corollary|Create|CstOp|Custom|Cut|Debug|Declare|Defined|Definition|Delimit|Dependencies|Dependent|Derive|Diffs|Drop|Elimination|else|end|End|Entry|Equality|Eval|Example|Existential|Existentials|Existing|exists|exists2|Export|Extern|Extraction|Fact|Fail|Field|File|Firstorder|fix|Fixpoint|Flags|Focus|for|forall|From|fun|Funclass|Function|Functional|GC|Generalizable|Goal|Grab|Grammar|Graph|Guarded|Haskell|Heap|Hide|Hint|HintDb|Hints|Hypotheses|Hypothesis|Identity|if|IF|Immediate|Implicit|Implicits|Import|in|Include|Induction|Inductive|Infix|Info|Initial|InjTyp|Inline|Inspect|Instance|Instances|Intro|Intros|Inversion|Inversion_clear|JSON|Language|Left|Lemma|let|Let|Lia|Libraries|Library|Load|LoadPath|Locate|Ltac|Ltac2|match|Match|measure|Method|Minimality|ML|Module|Modules|Morphism|move|Next|NoInline|Notation|Number|Obligation|Obligations|OCaml|Opaque|Open|Optimize|Parameter|Parameters|Parametric|Path|Paths|Prenex|Preterm|Primitive|Print|Profile|Projections|Proof|Prop|PropBinOp|Property|PropOp|Proposition|PropUOp|Pwd|Qed|Quit|Rec|Record|Recursive|Redirect|Reduction|Register|Relation|Remark|Remove|removed|Require|Reserved|Reset|Resolve|Restart|return|Rewrite|Right|Ring|Rings|Saturate|Save|Scheme|Scope|Scopes|Search|SearchHead|SearchPattern|SearchRewrite|Section|Separate|Set|Setoid|Show|Signatures|Solve|Solver|Sort|Sortclass|Sorted|Spec|SProp|Step|Strategies|Strategy|String|struct|Structure|SubClass|Subgraph|SuchThat|Tactic|Term|TestCompile|then|Theorem|Time|Timeout|To|Transparent|Type|Typeclasses|Types|Typing|Undelimit|Undo|Unfocus|Unfocused|Unfold|Universe|Universes|UnOp|UnOpSpec|Unshelve|using|Variable|Variables|Variant|Verbose|View|Visibility|wf|where|with|Zify)\\b/,\n      number:\n        /\\b(?:0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]+)?(?:p[+-]?\\d[\\d_]*)?|\\d[\\d_]*(?:\\.[\\d_]+)?(?:e[+-]?\\d[\\d_]*)?)\\b/i,\n      punct: {\n        pattern: /@\\{|\\{\\||\\[=|:>/,\n        alias: 'punctuation'\n      },\n      operator:\n        /\\/\\\\|\\\\\\/|\\.{2,3}|:{1,2}=|\\*\\*|[-=]>|<(?:->?|[+:=>]|<:)|>(?:=|->)|\\|[-|]?|[-!%&*+/<=>?@^~']/,\n      punctuation: /\\.\\(|`\\(|@\\{|`\\{|\\{\\||\\[=|:>|[:.,;(){}\\[\\]]/\n    }\n  })(Prism)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/refractor/lang/coq.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}}],"sources":{"../../node_modules/refractor/lang/coq.js":"'use strict'\n\nmodule.exports = coq\ncoq.displayName = 'coq'\ncoq.aliases = []\nfunction coq(Prism) {\n  ;(function (Prism) {\n    // https://github.com/coq/coq\n    var commentSource = /\\(\\*(?:[^(*]|\\((?!\\*)|\\*(?!\\))|<self>)*\\*\\)/.source\n    for (var i = 0; i < 2; i++) {\n      commentSource = commentSource.replace(/<self>/g, function () {\n        return commentSource\n      })\n    }\n    commentSource = commentSource.replace(/<self>/g, '[]')\n    Prism.languages.coq = {\n      comment: RegExp(commentSource),\n      string: {\n        pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n        greedy: true\n      },\n      attribute: [\n        {\n          pattern: RegExp(\n            /#\\[(?:[^\\](\"]|\"(?:[^\"]|\"\")*\"(?!\")|\\((?!\\*)|<comment>)*\\]/.source.replace(\n              /<comment>/g,\n              function () {\n                return commentSource\n              }\n            )\n          ),\n          greedy: true,\n          alias: 'attr-name',\n          inside: {\n            comment: RegExp(commentSource),\n            string: {\n              pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n              greedy: true\n            },\n            operator: /=/,\n            punctuation: /^#\\[|\\]$|[,()]/\n          }\n        },\n        {\n          pattern:\n            /\\b(?:Cumulative|Global|Local|Monomorphic|NonCumulative|Polymorphic|Private|Program)\\b/,\n          alias: 'attr-name'\n        }\n      ],\n      keyword:\n        /\\b(?:_|Abort|About|Add|Admit|Admitted|All|apply|Arguments|as|As|Assumptions|at|Axiom|Axioms|Back|BackTo|Backtrace|Bind|BinOp|BinOpSpec|BinRel|Blacklist|by|Canonical|Case|Cd|Check|Class|Classes|Close|Coercion|Coercions|cofix|CoFixpoint|CoInductive|Collection|Combined|Compute|Conjecture|Conjectures|Constant|Constants|Constraint|Constructors|Context|Corollary|Create|CstOp|Custom|Cut|Debug|Declare|Defined|Definition|Delimit|Dependencies|Dependent|Derive|Diffs|Drop|Elimination|else|end|End|Entry|Equality|Eval|Example|Existential|Existentials|Existing|exists|exists2|Export|Extern|Extraction|Fact|Fail|Field|File|Firstorder|fix|Fixpoint|Flags|Focus|for|forall|From|fun|Funclass|Function|Functional|GC|Generalizable|Goal|Grab|Grammar|Graph|Guarded|Haskell|Heap|Hide|Hint|HintDb|Hints|Hypotheses|Hypothesis|Identity|if|IF|Immediate|Implicit|Implicits|Import|in|Include|Induction|Inductive|Infix|Info|Initial|InjTyp|Inline|Inspect|Instance|Instances|Intro|Intros|Inversion|Inversion_clear|JSON|Language|Left|Lemma|let|Let|Lia|Libraries|Library|Load|LoadPath|Locate|Ltac|Ltac2|match|Match|measure|Method|Minimality|ML|Module|Modules|Morphism|move|Next|NoInline|Notation|Number|Obligation|Obligations|OCaml|Opaque|Open|Optimize|Parameter|Parameters|Parametric|Path|Paths|Prenex|Preterm|Primitive|Print|Profile|Projections|Proof|Prop|PropBinOp|Property|PropOp|Proposition|PropUOp|Pwd|Qed|Quit|Rec|Record|Recursive|Redirect|Reduction|Register|Relation|Remark|Remove|removed|Require|Reserved|Reset|Resolve|Restart|return|Rewrite|Right|Ring|Rings|Saturate|Save|Scheme|Scope|Scopes|Search|SearchHead|SearchPattern|SearchRewrite|Section|Separate|Set|Setoid|Show|Signatures|Solve|Solver|Sort|Sortclass|Sorted|Spec|SProp|Step|Strategies|Strategy|String|struct|Structure|SubClass|Subgraph|SuchThat|Tactic|Term|TestCompile|then|Theorem|Time|Timeout|To|Transparent|Type|Typeclasses|Types|Typing|Undelimit|Undo|Unfocus|Unfocused|Unfold|Universe|Universes|UnOp|UnOpSpec|Unshelve|using|Variable|Variables|Variant|Verbose|View|Visibility|wf|where|with|Zify)\\b/,\n      number:\n        /\\b(?:0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]+)?(?:p[+-]?\\d[\\d_]*)?|\\d[\\d_]*(?:\\.[\\d_]+)?(?:e[+-]?\\d[\\d_]*)?)\\b/i,\n      punct: {\n        pattern: /@\\{|\\{\\||\\[=|:>/,\n        alias: 'punctuation'\n      },\n      operator:\n        /\\/\\\\|\\\\\\/|\\.{2,3}|:{1,2}=|\\*\\*|[-=]>|<(?:->?|[+:=>]|<:)|>(?:=|->)|\\|[-|]?|[-!%&*+/<=>?@^~']/,\n      punctuation: /\\.\\(|`\\(|@\\{|`\\{|\\{\\||\\[=|:>|[:.,;(){}\\[\\]]/\n    }\n  })(Prism)\n}\n"},"lineCount":64}},"error":null,"hash":"8ea55c984cea153c8291ab2b44af35d3","cacheData":{"env":{}}}