{"id":"../../node_modules/refractor/lang/csharp.js","dependencies":[{"name":"/home/abtin/Desktop/Pinote/package.json","includedInParent":true,"mtime":1632551681475},{"name":"/home/abtin/Desktop/Pinote/node_modules/refractor/package.json","includedInParent":true,"mtime":1632151213327}],"generated":{"js":"'use strict'\n\nmodule.exports = csharp\ncsharp.displayName = 'csharp'\ncsharp.aliases = ['dotnet', 'cs']\nfunction csharp(Prism) {\n  ;(function (Prism) {\n    /**\n     * Replaces all placeholders \"<<n>>\" of given pattern with the n-th replacement (zero based).\n     *\n     * Note: This is a simple text based replacement. Be careful when using backreferences!\n     *\n     * @param {string} pattern the given pattern.\n     * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.\n     * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.\n     * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source\n     */\n    function replace(pattern, replacements) {\n      return pattern.replace(/<<(\\d+)>>/g, function (m, index) {\n        return '(?:' + replacements[+index] + ')'\n      })\n    }\n    /**\n     * @param {string} pattern\n     * @param {string[]} replacements\n     * @param {string} [flags]\n     * @returns {RegExp}\n     */\n    function re(pattern, replacements, flags) {\n      return RegExp(replace(pattern, replacements), flags || '')\n    }\n    /**\n     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n     *\n     * @param {string} pattern\n     * @param {number} depthLog2\n     * @returns {string}\n     */\n    function nested(pattern, depthLog2) {\n      for (var i = 0; i < depthLog2; i++) {\n        pattern = pattern.replace(/<<self>>/g, function () {\n          return '(?:' + pattern + ')'\n        })\n      }\n      return pattern.replace(/<<self>>/g, '[^\\\\s\\\\S]')\n    } // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/\n    var keywordKinds = {\n      // keywords which represent a return or variable type\n      type: 'bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void',\n      // keywords which are used to declare a type\n      typeDeclaration: 'class enum interface struct',\n      // contextual keywords\n      // (\"var\" and \"dynamic\" are missing because they are used like types)\n      contextual:\n        'add alias and ascending async await by descending from get global group into join let nameof not notnull on or orderby partial remove select set unmanaged value when where',\n      // all other keywords\n      other:\n        'abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield'\n    } // keywords\n    function keywordsToPattern(words) {\n      return '\\\\b(?:' + words.trim().replace(/ /g, '|') + ')\\\\b'\n    }\n    var typeDeclarationKeywords = keywordsToPattern(\n      keywordKinds.typeDeclaration\n    )\n    var keywords = RegExp(\n      keywordsToPattern(\n        keywordKinds.type +\n          ' ' +\n          keywordKinds.typeDeclaration +\n          ' ' +\n          keywordKinds.contextual +\n          ' ' +\n          keywordKinds.other\n      )\n    )\n    var nonTypeKeywords = keywordsToPattern(\n      keywordKinds.typeDeclaration +\n        ' ' +\n        keywordKinds.contextual +\n        ' ' +\n        keywordKinds.other\n    )\n    var nonContextualKeywords = keywordsToPattern(\n      keywordKinds.type +\n        ' ' +\n        keywordKinds.typeDeclaration +\n        ' ' +\n        keywordKinds.other\n    ) // types\n    var generic = nested(/<(?:[^<>;=+\\-*/%&|^]|<<self>>)*>/.source, 2) // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.\n    var nestedRound = nested(/\\((?:[^()]|<<self>>)*\\)/.source, 2)\n    var name = /@?\\b[A-Za-z_]\\w*\\b/.source\n    var genericName = replace(/<<0>>(?:\\s*<<1>>)?/.source, [name, generic])\n    var identifier = replace(/(?!<<0>>)<<1>>(?:\\s*\\.\\s*<<1>>)*/.source, [\n      nonTypeKeywords,\n      genericName\n    ])\n    var array = /\\[\\s*(?:,\\s*)*\\]/.source\n    var typeExpressionWithoutTuple = replace(\n      /<<0>>(?:\\s*(?:\\?\\s*)?<<1>>)*(?:\\s*\\?)?/.source,\n      [identifier, array]\n    )\n    var tupleElement = replace(\n      /[^,()<>[\\];=+\\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source,\n      [generic, nestedRound, array]\n    )\n    var tuple = replace(/\\(<<0>>+(?:,<<0>>+)+\\)/.source, [tupleElement])\n    var typeExpression = replace(\n      /(?:<<0>>|<<1>>)(?:\\s*(?:\\?\\s*)?<<2>>)*(?:\\s*\\?)?/.source,\n      [tuple, identifier, array]\n    )\n    var typeInside = {\n      keyword: keywords,\n      punctuation: /[<>()?,.:[\\]]/\n    } // strings & characters\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals\n    var character = /'(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'/.source // simplified pattern\n    var regularString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/.source\n    var verbatimString = /@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source\n    Prism.languages.csharp = Prism.languages.extend('clike', {\n      string: [\n        {\n          pattern: re(/(^|[^$\\\\])<<0>>/.source, [verbatimString]),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: re(/(^|[^@$\\\\])<<0>>/.source, [regularString]),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: RegExp(character),\n          greedy: true,\n          alias: 'character'\n        }\n      ],\n      'class-name': [\n        {\n          // Using static\n          // using static System.Math;\n          pattern: re(/(\\busing\\s+static\\s+)<<0>>(?=\\s*;)/.source, [\n            identifier\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Using alias (type)\n          // using Project = PC.MyCompany.Project;\n          pattern: re(/(\\busing\\s+<<0>>\\s*=\\s*)<<1>>(?=\\s*;)/.source, [\n            name,\n            typeExpression\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Using alias (alias)\n          // using Project = PC.MyCompany.Project;\n          pattern: re(/(\\busing\\s+)<<0>>(?=\\s*=)/.source, [name]),\n          lookbehind: true\n        },\n        {\n          // Type declarations\n          // class Foo<A, B>\n          // interface Foo<out A, B>\n          pattern: re(/(\\b<<0>>\\s+)<<1>>/.source, [\n            typeDeclarationKeywords,\n            genericName\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Single catch exception declaration\n          // catch(Foo)\n          // (things like catch(Foo e) is covered by variable declaration)\n          pattern: re(/(\\bcatch\\s*\\(\\s*)<<0>>/.source, [identifier]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Name of the type parameter of generic constraints\n          // where Foo : class\n          pattern: re(/(\\bwhere\\s+)<<0>>/.source, [name]),\n          lookbehind: true\n        },\n        {\n          // Casts and checks via as and is.\n          // as Foo<A>, is Bar<B>\n          // (things like if(a is Foo b) is covered by variable declaration)\n          pattern: re(/(\\b(?:is(?:\\s+not)?|as)\\s+)<<0>>/.source, [\n            typeExpressionWithoutTuple\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Variable, field and parameter declaration\n          // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)\n          pattern: re(\n            /\\b<<0>>(?=\\s+(?!<<1>>)<<2>>(?:\\s*[=,;:{)\\]]|\\s+(?:in|when)\\b))/\n              .source,\n            [typeExpression, nonContextualKeywords, name]\n          ),\n          inside: typeInside\n        }\n      ],\n      keyword: keywords,\n      // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals\n      number:\n        /(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:ul|lu|[dflmu])?\\b/i,\n      operator: />>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,\n      punctuation: /\\?\\.?|::|[{}[\\];(),.:]/\n    })\n    Prism.languages.insertBefore('csharp', 'number', {\n      range: {\n        pattern: /\\.\\./,\n        alias: 'operator'\n      }\n    })\n    Prism.languages.insertBefore('csharp', 'punctuation', {\n      'named-parameter': {\n        pattern: re(/([(,]\\s*)<<0>>(?=\\s*:)/.source, [name]),\n        lookbehind: true,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('csharp', 'class-name', {\n      namespace: {\n        // namespace Foo.Bar {}\n        // using Foo.Bar;\n        pattern: re(\n          /(\\b(?:namespace|using)\\s+)<<0>>(?:\\s*\\.\\s*<<0>>)*(?=\\s*[;{])/.source,\n          [name]\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      'type-expression': {\n        // default(Foo), typeof(Foo<Bar>), sizeof(int)\n        pattern: re(\n          /(\\b(?:default|typeof|sizeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<<0>>)*(?=\\s*\\))/\n            .source,\n          [nestedRound]\n        ),\n        lookbehind: true,\n        alias: 'class-name',\n        inside: typeInside\n      },\n      'return-type': {\n        // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0\n        // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];\n        // int Foo => 0; int Foo { get; set } = 0;\n        pattern: re(\n          /<<0>>(?=\\s+(?:<<1>>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source,\n          [typeExpression, identifier]\n        ),\n        inside: typeInside,\n        alias: 'class-name'\n      },\n      'constructor-invocation': {\n        // new List<Foo<Bar[]>> { }\n        pattern: re(/(\\bnew\\s+)<<0>>(?=\\s*[[({])/.source, [typeExpression]),\n        lookbehind: true,\n        inside: typeInside,\n        alias: 'class-name'\n      },\n      /*'explicit-implementation': {\n// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();\npattern: replace(/\\b<<0>>(?=\\.<<1>>)/, className, methodOrPropertyDeclaration),\ninside: classNameInside,\nalias: 'class-name'\n},*/\n      'generic-method': {\n        // foo<Bar>()\n        pattern: re(/<<0>>\\s*<<1>>(?=\\s*\\()/.source, [name, generic]),\n        inside: {\n          function: re(/^<<0>>/.source, [name]),\n          generic: {\n            pattern: RegExp(generic),\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      },\n      'type-list': {\n        // The list of types inherited or of generic constraints\n        // class Foo<F> : Bar, IList<FooBar>\n        // where F : Bar, IList<int>\n        pattern: re(\n          /\\b((?:<<0>>\\s+<<1>>|where\\s+<<2>>)\\s*:\\s*)(?:<<3>>|<<4>>)(?:\\s*,\\s*(?:<<3>>|<<4>>))*(?=\\s*(?:where|[{;]|=>|$))/\n            .source,\n          [\n            typeDeclarationKeywords,\n            genericName,\n            name,\n            typeExpression,\n            keywords.source\n          ]\n        ),\n        lookbehind: true,\n        inside: {\n          keyword: keywords,\n          'class-name': {\n            pattern: RegExp(typeExpression),\n            greedy: true,\n            inside: typeInside\n          },\n          punctuation: /,/\n        }\n      },\n      preprocessor: {\n        pattern: /(^[\\t ]*)#.*/m,\n        lookbehind: true,\n        alias: 'property',\n        inside: {\n          // highlight preprocessor directives as keywords\n          directive: {\n            pattern:\n              /(#)\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\b/,\n            lookbehind: true,\n            alias: 'keyword'\n          }\n        }\n      }\n    }) // attributes\n    var regularStringOrCharacter = regularString + '|' + character\n    var regularStringCharacterOrComment = replace(\n      /\\/(?![*/])|\\/\\/[^\\r\\n]*[\\r\\n]|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>/.source,\n      [regularStringOrCharacter]\n    )\n    var roundExpression = nested(\n      replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [\n        regularStringCharacterOrComment\n      ]),\n      2\n    ) // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets\n    var attrTarget =\n      /\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/\n        .source\n    var attr = replace(/<<0>>(?:\\s*\\(<<1>>*\\))?/.source, [\n      identifier,\n      roundExpression\n    ])\n    Prism.languages.insertBefore('csharp', 'class-name', {\n      attribute: {\n        // Attributes\n        // [Foo], [Foo(1), Bar(2, Prop = \"foo\")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]\n        pattern: re(\n          /((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<<0>>\\s*:\\s*)?<<1>>(?:\\s*,\\s*<<1>>)*(?=\\s*\\])/\n            .source,\n          [attrTarget, attr]\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          target: {\n            pattern: re(/^<<0>>(?=\\s*:)/.source, [attrTarget]),\n            alias: 'keyword'\n          },\n          'attribute-arguments': {\n            pattern: re(/\\(<<0>>*\\)/.source, [roundExpression]),\n            inside: Prism.languages.csharp\n          },\n          'class-name': {\n            pattern: RegExp(identifier),\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          punctuation: /[:,]/\n        }\n      }\n    }) // string interpolation\n    var formatString = /:[^}\\r\\n]+/.source // multi line\n    var mInterpolationRound = nested(\n      replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [\n        regularStringCharacterOrComment\n      ]),\n      2\n    )\n    var mInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [\n      mInterpolationRound,\n      formatString\n    ]) // single line\n    var sInterpolationRound = nested(\n      replace(\n        /[^\"'/()]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>|\\(<<self>>*\\)/\n          .source,\n        [regularStringOrCharacter]\n      ),\n      2\n    )\n    var sInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [\n      sInterpolationRound,\n      formatString\n    ])\n    function createInterpolationInside(interpolation, interpolationRound) {\n      return {\n        interpolation: {\n          pattern: re(/((?:^|[^{])(?:\\{\\{)*)<<0>>/.source, [interpolation]),\n          lookbehind: true,\n          inside: {\n            'format-string': {\n              pattern: re(/(^\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\}$)/.source, [\n                interpolationRound,\n                formatString\n              ]),\n              lookbehind: true,\n              inside: {\n                punctuation: /^:/\n              }\n            },\n            punctuation: /^\\{|\\}$/,\n            expression: {\n              pattern: /[\\s\\S]+/,\n              alias: 'language-csharp',\n              inside: Prism.languages.csharp\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n    Prism.languages.insertBefore('csharp', 'string', {\n      'interpolation-string': [\n        {\n          pattern: re(\n            /(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<<0>>|[^\\\\{\"])*\"/.source,\n            [mInterpolation]\n          ),\n          lookbehind: true,\n          greedy: true,\n          inside: createInterpolationInside(mInterpolation, mInterpolationRound)\n        },\n        {\n          pattern: re(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<<0>>|[^\\\\\"{])*\"/.source, [\n            sInterpolation\n          ]),\n          lookbehind: true,\n          greedy: true,\n          inside: createInterpolationInside(sInterpolation, sInterpolationRound)\n        }\n      ]\n    })\n  })(Prism)\n  Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../../node_modules/refractor/lang/csharp.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}}],"sources":{"../../node_modules/refractor/lang/csharp.js":"'use strict'\n\nmodule.exports = csharp\ncsharp.displayName = 'csharp'\ncsharp.aliases = ['dotnet', 'cs']\nfunction csharp(Prism) {\n  ;(function (Prism) {\n    /**\n     * Replaces all placeholders \"<<n>>\" of given pattern with the n-th replacement (zero based).\n     *\n     * Note: This is a simple text based replacement. Be careful when using backreferences!\n     *\n     * @param {string} pattern the given pattern.\n     * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.\n     * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.\n     * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source\n     */\n    function replace(pattern, replacements) {\n      return pattern.replace(/<<(\\d+)>>/g, function (m, index) {\n        return '(?:' + replacements[+index] + ')'\n      })\n    }\n    /**\n     * @param {string} pattern\n     * @param {string[]} replacements\n     * @param {string} [flags]\n     * @returns {RegExp}\n     */\n    function re(pattern, replacements, flags) {\n      return RegExp(replace(pattern, replacements), flags || '')\n    }\n    /**\n     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n     *\n     * @param {string} pattern\n     * @param {number} depthLog2\n     * @returns {string}\n     */\n    function nested(pattern, depthLog2) {\n      for (var i = 0; i < depthLog2; i++) {\n        pattern = pattern.replace(/<<self>>/g, function () {\n          return '(?:' + pattern + ')'\n        })\n      }\n      return pattern.replace(/<<self>>/g, '[^\\\\s\\\\S]')\n    } // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/\n    var keywordKinds = {\n      // keywords which represent a return or variable type\n      type: 'bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void',\n      // keywords which are used to declare a type\n      typeDeclaration: 'class enum interface struct',\n      // contextual keywords\n      // (\"var\" and \"dynamic\" are missing because they are used like types)\n      contextual:\n        'add alias and ascending async await by descending from get global group into join let nameof not notnull on or orderby partial remove select set unmanaged value when where',\n      // all other keywords\n      other:\n        'abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield'\n    } // keywords\n    function keywordsToPattern(words) {\n      return '\\\\b(?:' + words.trim().replace(/ /g, '|') + ')\\\\b'\n    }\n    var typeDeclarationKeywords = keywordsToPattern(\n      keywordKinds.typeDeclaration\n    )\n    var keywords = RegExp(\n      keywordsToPattern(\n        keywordKinds.type +\n          ' ' +\n          keywordKinds.typeDeclaration +\n          ' ' +\n          keywordKinds.contextual +\n          ' ' +\n          keywordKinds.other\n      )\n    )\n    var nonTypeKeywords = keywordsToPattern(\n      keywordKinds.typeDeclaration +\n        ' ' +\n        keywordKinds.contextual +\n        ' ' +\n        keywordKinds.other\n    )\n    var nonContextualKeywords = keywordsToPattern(\n      keywordKinds.type +\n        ' ' +\n        keywordKinds.typeDeclaration +\n        ' ' +\n        keywordKinds.other\n    ) // types\n    var generic = nested(/<(?:[^<>;=+\\-*/%&|^]|<<self>>)*>/.source, 2) // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.\n    var nestedRound = nested(/\\((?:[^()]|<<self>>)*\\)/.source, 2)\n    var name = /@?\\b[A-Za-z_]\\w*\\b/.source\n    var genericName = replace(/<<0>>(?:\\s*<<1>>)?/.source, [name, generic])\n    var identifier = replace(/(?!<<0>>)<<1>>(?:\\s*\\.\\s*<<1>>)*/.source, [\n      nonTypeKeywords,\n      genericName\n    ])\n    var array = /\\[\\s*(?:,\\s*)*\\]/.source\n    var typeExpressionWithoutTuple = replace(\n      /<<0>>(?:\\s*(?:\\?\\s*)?<<1>>)*(?:\\s*\\?)?/.source,\n      [identifier, array]\n    )\n    var tupleElement = replace(\n      /[^,()<>[\\];=+\\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source,\n      [generic, nestedRound, array]\n    )\n    var tuple = replace(/\\(<<0>>+(?:,<<0>>+)+\\)/.source, [tupleElement])\n    var typeExpression = replace(\n      /(?:<<0>>|<<1>>)(?:\\s*(?:\\?\\s*)?<<2>>)*(?:\\s*\\?)?/.source,\n      [tuple, identifier, array]\n    )\n    var typeInside = {\n      keyword: keywords,\n      punctuation: /[<>()?,.:[\\]]/\n    } // strings & characters\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals\n    var character = /'(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'/.source // simplified pattern\n    var regularString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/.source\n    var verbatimString = /@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source\n    Prism.languages.csharp = Prism.languages.extend('clike', {\n      string: [\n        {\n          pattern: re(/(^|[^$\\\\])<<0>>/.source, [verbatimString]),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: re(/(^|[^@$\\\\])<<0>>/.source, [regularString]),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: RegExp(character),\n          greedy: true,\n          alias: 'character'\n        }\n      ],\n      'class-name': [\n        {\n          // Using static\n          // using static System.Math;\n          pattern: re(/(\\busing\\s+static\\s+)<<0>>(?=\\s*;)/.source, [\n            identifier\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Using alias (type)\n          // using Project = PC.MyCompany.Project;\n          pattern: re(/(\\busing\\s+<<0>>\\s*=\\s*)<<1>>(?=\\s*;)/.source, [\n            name,\n            typeExpression\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Using alias (alias)\n          // using Project = PC.MyCompany.Project;\n          pattern: re(/(\\busing\\s+)<<0>>(?=\\s*=)/.source, [name]),\n          lookbehind: true\n        },\n        {\n          // Type declarations\n          // class Foo<A, B>\n          // interface Foo<out A, B>\n          pattern: re(/(\\b<<0>>\\s+)<<1>>/.source, [\n            typeDeclarationKeywords,\n            genericName\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Single catch exception declaration\n          // catch(Foo)\n          // (things like catch(Foo e) is covered by variable declaration)\n          pattern: re(/(\\bcatch\\s*\\(\\s*)<<0>>/.source, [identifier]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Name of the type parameter of generic constraints\n          // where Foo : class\n          pattern: re(/(\\bwhere\\s+)<<0>>/.source, [name]),\n          lookbehind: true\n        },\n        {\n          // Casts and checks via as and is.\n          // as Foo<A>, is Bar<B>\n          // (things like if(a is Foo b) is covered by variable declaration)\n          pattern: re(/(\\b(?:is(?:\\s+not)?|as)\\s+)<<0>>/.source, [\n            typeExpressionWithoutTuple\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Variable, field and parameter declaration\n          // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)\n          pattern: re(\n            /\\b<<0>>(?=\\s+(?!<<1>>)<<2>>(?:\\s*[=,;:{)\\]]|\\s+(?:in|when)\\b))/\n              .source,\n            [typeExpression, nonContextualKeywords, name]\n          ),\n          inside: typeInside\n        }\n      ],\n      keyword: keywords,\n      // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals\n      number:\n        /(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:ul|lu|[dflmu])?\\b/i,\n      operator: />>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,\n      punctuation: /\\?\\.?|::|[{}[\\];(),.:]/\n    })\n    Prism.languages.insertBefore('csharp', 'number', {\n      range: {\n        pattern: /\\.\\./,\n        alias: 'operator'\n      }\n    })\n    Prism.languages.insertBefore('csharp', 'punctuation', {\n      'named-parameter': {\n        pattern: re(/([(,]\\s*)<<0>>(?=\\s*:)/.source, [name]),\n        lookbehind: true,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('csharp', 'class-name', {\n      namespace: {\n        // namespace Foo.Bar {}\n        // using Foo.Bar;\n        pattern: re(\n          /(\\b(?:namespace|using)\\s+)<<0>>(?:\\s*\\.\\s*<<0>>)*(?=\\s*[;{])/.source,\n          [name]\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      'type-expression': {\n        // default(Foo), typeof(Foo<Bar>), sizeof(int)\n        pattern: re(\n          /(\\b(?:default|typeof|sizeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<<0>>)*(?=\\s*\\))/\n            .source,\n          [nestedRound]\n        ),\n        lookbehind: true,\n        alias: 'class-name',\n        inside: typeInside\n      },\n      'return-type': {\n        // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0\n        // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];\n        // int Foo => 0; int Foo { get; set } = 0;\n        pattern: re(\n          /<<0>>(?=\\s+(?:<<1>>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source,\n          [typeExpression, identifier]\n        ),\n        inside: typeInside,\n        alias: 'class-name'\n      },\n      'constructor-invocation': {\n        // new List<Foo<Bar[]>> { }\n        pattern: re(/(\\bnew\\s+)<<0>>(?=\\s*[[({])/.source, [typeExpression]),\n        lookbehind: true,\n        inside: typeInside,\n        alias: 'class-name'\n      },\n      /*'explicit-implementation': {\n// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();\npattern: replace(/\\b<<0>>(?=\\.<<1>>)/, className, methodOrPropertyDeclaration),\ninside: classNameInside,\nalias: 'class-name'\n},*/\n      'generic-method': {\n        // foo<Bar>()\n        pattern: re(/<<0>>\\s*<<1>>(?=\\s*\\()/.source, [name, generic]),\n        inside: {\n          function: re(/^<<0>>/.source, [name]),\n          generic: {\n            pattern: RegExp(generic),\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      },\n      'type-list': {\n        // The list of types inherited or of generic constraints\n        // class Foo<F> : Bar, IList<FooBar>\n        // where F : Bar, IList<int>\n        pattern: re(\n          /\\b((?:<<0>>\\s+<<1>>|where\\s+<<2>>)\\s*:\\s*)(?:<<3>>|<<4>>)(?:\\s*,\\s*(?:<<3>>|<<4>>))*(?=\\s*(?:where|[{;]|=>|$))/\n            .source,\n          [\n            typeDeclarationKeywords,\n            genericName,\n            name,\n            typeExpression,\n            keywords.source\n          ]\n        ),\n        lookbehind: true,\n        inside: {\n          keyword: keywords,\n          'class-name': {\n            pattern: RegExp(typeExpression),\n            greedy: true,\n            inside: typeInside\n          },\n          punctuation: /,/\n        }\n      },\n      preprocessor: {\n        pattern: /(^[\\t ]*)#.*/m,\n        lookbehind: true,\n        alias: 'property',\n        inside: {\n          // highlight preprocessor directives as keywords\n          directive: {\n            pattern:\n              /(#)\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\b/,\n            lookbehind: true,\n            alias: 'keyword'\n          }\n        }\n      }\n    }) // attributes\n    var regularStringOrCharacter = regularString + '|' + character\n    var regularStringCharacterOrComment = replace(\n      /\\/(?![*/])|\\/\\/[^\\r\\n]*[\\r\\n]|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>/.source,\n      [regularStringOrCharacter]\n    )\n    var roundExpression = nested(\n      replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [\n        regularStringCharacterOrComment\n      ]),\n      2\n    ) // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets\n    var attrTarget =\n      /\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/\n        .source\n    var attr = replace(/<<0>>(?:\\s*\\(<<1>>*\\))?/.source, [\n      identifier,\n      roundExpression\n    ])\n    Prism.languages.insertBefore('csharp', 'class-name', {\n      attribute: {\n        // Attributes\n        // [Foo], [Foo(1), Bar(2, Prop = \"foo\")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]\n        pattern: re(\n          /((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<<0>>\\s*:\\s*)?<<1>>(?:\\s*,\\s*<<1>>)*(?=\\s*\\])/\n            .source,\n          [attrTarget, attr]\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          target: {\n            pattern: re(/^<<0>>(?=\\s*:)/.source, [attrTarget]),\n            alias: 'keyword'\n          },\n          'attribute-arguments': {\n            pattern: re(/\\(<<0>>*\\)/.source, [roundExpression]),\n            inside: Prism.languages.csharp\n          },\n          'class-name': {\n            pattern: RegExp(identifier),\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          punctuation: /[:,]/\n        }\n      }\n    }) // string interpolation\n    var formatString = /:[^}\\r\\n]+/.source // multi line\n    var mInterpolationRound = nested(\n      replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [\n        regularStringCharacterOrComment\n      ]),\n      2\n    )\n    var mInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [\n      mInterpolationRound,\n      formatString\n    ]) // single line\n    var sInterpolationRound = nested(\n      replace(\n        /[^\"'/()]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>|\\(<<self>>*\\)/\n          .source,\n        [regularStringOrCharacter]\n      ),\n      2\n    )\n    var sInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [\n      sInterpolationRound,\n      formatString\n    ])\n    function createInterpolationInside(interpolation, interpolationRound) {\n      return {\n        interpolation: {\n          pattern: re(/((?:^|[^{])(?:\\{\\{)*)<<0>>/.source, [interpolation]),\n          lookbehind: true,\n          inside: {\n            'format-string': {\n              pattern: re(/(^\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\}$)/.source, [\n                interpolationRound,\n                formatString\n              ]),\n              lookbehind: true,\n              inside: {\n                punctuation: /^:/\n              }\n            },\n            punctuation: /^\\{|\\}$/,\n            expression: {\n              pattern: /[\\s\\S]+/,\n              alias: 'language-csharp',\n              inside: Prism.languages.csharp\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n    Prism.languages.insertBefore('csharp', 'string', {\n      'interpolation-string': [\n        {\n          pattern: re(\n            /(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<<0>>|[^\\\\{\"])*\"/.source,\n            [mInterpolation]\n          ),\n          lookbehind: true,\n          greedy: true,\n          inside: createInterpolationInside(mInterpolation, mInterpolationRound)\n        },\n        {\n          pattern: re(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<<0>>|[^\\\\\"{])*\"/.source, [\n            sInterpolation\n          ]),\n          lookbehind: true,\n          greedy: true,\n          inside: createInterpolationInside(sInterpolation, sInterpolationRound)\n        }\n      ]\n    })\n  })(Prism)\n  Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp\n}\n"},"lineCount":455}},"error":null,"hash":"11eda5d0c339d1ec218f3409c5a8b68d","cacheData":{"env":{}}}