{"id":"../../node_modules/refractor/lang/agda.js","dependencies":[{"name":"/home/abtin/Desktop/Pinote/package.json","includedInParent":true,"mtime":1632551681475},{"name":"/home/abtin/Desktop/Pinote/node_modules/refractor/package.json","includedInParent":true,"mtime":1632151213327}],"generated":{"js":"'use strict'\n\nmodule.exports = agda\nagda.displayName = 'agda'\nagda.aliases = []\nfunction agda(Prism) {\n  ;(function (Prism) {\n    Prism.languages.agda = {\n      comment: /\\{-[\\s\\S]*?(?:-\\}|$)|--.*/,\n      string: {\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n        greedy: true\n      },\n      punctuation: /[(){}⦃⦄.;@]/,\n      'class-name': {\n        pattern: /((?:data|record) +)\\S+/,\n        lookbehind: true\n      },\n      function: {\n        pattern: /(^[ \\t]*)(?!\\s)[^:\\r\\n]+(?=:)/m,\n        lookbehind: true\n      },\n      operator: {\n        pattern: /(^\\s*|\\s)(?:[=|:∀→λ\\\\?_]|->)(?=\\s)/,\n        lookbehind: true\n      },\n      keyword:\n        /\\b(?:Set|abstract|constructor|data|eta-equality|field|forall|hiding|import|in|inductive|infix|infixl|infixr|instance|let|macro|module|mutual|no-eta-equality|open|overlap|pattern|postulate|primitive|private|public|quote|quoteContext|quoteGoal|quoteTerm|record|renaming|rewrite|syntax|tactic|unquote|unquoteDecl|unquoteDef|using|variable|where|with)\\b/\n    }\n  })(Prism)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/refractor/lang/agda.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}}],"sources":{"../../node_modules/refractor/lang/agda.js":"'use strict'\n\nmodule.exports = agda\nagda.displayName = 'agda'\nagda.aliases = []\nfunction agda(Prism) {\n  ;(function (Prism) {\n    Prism.languages.agda = {\n      comment: /\\{-[\\s\\S]*?(?:-\\}|$)|--.*/,\n      string: {\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n        greedy: true\n      },\n      punctuation: /[(){}⦃⦄.;@]/,\n      'class-name': {\n        pattern: /((?:data|record) +)\\S+/,\n        lookbehind: true\n      },\n      function: {\n        pattern: /(^[ \\t]*)(?!\\s)[^:\\r\\n]+(?=:)/m,\n        lookbehind: true\n      },\n      operator: {\n        pattern: /(^\\s*|\\s)(?:[=|:∀→λ\\\\?_]|->)(?=\\s)/,\n        lookbehind: true\n      },\n      keyword:\n        /\\b(?:Set|abstract|constructor|data|eta-equality|field|forall|hiding|import|in|inductive|infix|infixl|infixr|instance|let|macro|module|mutual|no-eta-equality|open|overlap|pattern|postulate|primitive|private|public|quote|quoteContext|quoteGoal|quoteTerm|record|renaming|rewrite|syntax|tactic|unquote|unquoteDecl|unquoteDef|using|variable|where|with)\\b/\n    }\n  })(Prism)\n}\n"},"lineCount":32}},"error":null,"hash":"e9c1b8ffbde5a10b8352fdadf3b238ec","cacheData":{"env":{}}}