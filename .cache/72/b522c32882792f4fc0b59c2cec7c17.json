{"id":"../../node_modules/github-slugger/index.js","dependencies":[{"name":"/home/abtin/Desktop/Pinote/package.json","includedInParent":true,"mtime":1632551681475},{"name":"/home/abtin/Desktop/Pinote/node_modules/github-slugger/package.json","includedInParent":true,"mtime":1632151212454},{"name":"./regex.js","loc":{"line":1,"column":22},"parent":"/home/abtin/Desktop/Pinote/node_modules/github-slugger/index.js","resolved":"/home/abtin/Desktop/Pinote/node_modules/github-slugger/regex.js"}],"generated":{"js":"const regex = require('./regex.js')\n\nmodule.exports = BananaSlug\n\nconst own = Object.hasOwnProperty\n\nfunction BananaSlug () {\n  const self = this\n\n  if (!(self instanceof BananaSlug)) return new BananaSlug()\n\n  self.reset()\n}\n\n/**\n * Generate a unique slug.\n * @param  {string} value String of text to slugify\n * @param  {boolean} [false] Keep the current case, otherwise make all lowercase\n * @return {string}       A unique slug string\n */\nBananaSlug.prototype.slug = function (value, maintainCase) {\n  const self = this\n  let slug = slugger(value, maintainCase === true)\n  const originalSlug = slug\n\n  while (own.call(self.occurrences, slug)) {\n    self.occurrences[originalSlug]++\n    slug = originalSlug + '-' + self.occurrences[originalSlug]\n  }\n\n  self.occurrences[slug] = 0\n\n  return slug\n}\n\n/**\n * Reset - Forget all previous slugs\n * @return void\n */\nBananaSlug.prototype.reset = function () {\n  this.occurrences = Object.create(null)\n}\n\nfunction slugger (string, maintainCase) {\n  if (typeof string !== 'string') return ''\n  if (!maintainCase) string = string.toLowerCase()\n  return string.replace(regex, '').replace(/ /g, '-')\n}\n\nBananaSlug.slug = slugger\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/github-slugger/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/github-slugger/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}}],"sources":{"../../node_modules/github-slugger/index.js":"const regex = require('./regex.js')\n\nmodule.exports = BananaSlug\n\nconst own = Object.hasOwnProperty\n\nfunction BananaSlug () {\n  const self = this\n\n  if (!(self instanceof BananaSlug)) return new BananaSlug()\n\n  self.reset()\n}\n\n/**\n * Generate a unique slug.\n * @param  {string} value String of text to slugify\n * @param  {boolean} [false] Keep the current case, otherwise make all lowercase\n * @return {string}       A unique slug string\n */\nBananaSlug.prototype.slug = function (value, maintainCase) {\n  const self = this\n  let slug = slugger(value, maintainCase === true)\n  const originalSlug = slug\n\n  while (own.call(self.occurrences, slug)) {\n    self.occurrences[originalSlug]++\n    slug = originalSlug + '-' + self.occurrences[originalSlug]\n  }\n\n  self.occurrences[slug] = 0\n\n  return slug\n}\n\n/**\n * Reset - Forget all previous slugs\n * @return void\n */\nBananaSlug.prototype.reset = function () {\n  this.occurrences = Object.create(null)\n}\n\nfunction slugger (string, maintainCase) {\n  if (typeof string !== 'string') return ''\n  if (!maintainCase) string = string.toLowerCase()\n  return string.replace(regex, '').replace(/ /g, '-')\n}\n\nBananaSlug.slug = slugger\n"},"lineCount":51}},"error":null,"hash":"66ea0688bd672e3be4becbc7787e82c0","cacheData":{"env":{}}}