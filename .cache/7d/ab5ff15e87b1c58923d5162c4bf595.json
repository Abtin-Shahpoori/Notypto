{"id":"../../node_modules/refractor/lang/regex.js","dependencies":[{"name":"/home/abtin/Desktop/Pinote/package.json","includedInParent":true,"mtime":1632153636934},{"name":"/home/abtin/Desktop/Pinote/node_modules/refractor/package.json","includedInParent":true,"mtime":1632151213327}],"generated":{"js":"'use strict'\n\nmodule.exports = regex\nregex.displayName = 'regex'\nregex.aliases = []\nfunction regex(Prism) {\n  ;(function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    }\n    var escape =\n      /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/\n    var charClass = {\n      pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    }\n    var charClassWithoutDot = {\n      pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    }\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')'\n    var range = RegExp(rangeChar + '-' + rangeChar) // the name of a capturing group\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    }\n    Prism.languages.regex = {\n      charset: {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'charset-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          'charset-punctuation': {\n            pattern: /^\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': {\n                pattern: /-/,\n                alias: 'operator'\n              }\n            }\n          },\n          'special-escape': specialEscape,\n          charclass: charClassWithoutDot,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      charclass: charClass,\n      backreference: [\n        {\n          // a backreference which is not an octal escape\n          pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n          alias: 'keyword'\n        },\n        {\n          pattern: /\\\\k<[^<>']+>/,\n          alias: 'keyword',\n          inside: {\n            'group-name': groupName\n          }\n        }\n      ],\n      anchor: {\n        pattern: /[$^]|\\\\[ABbGZz]/,\n        alias: 'function'\n      },\n      escape: escape,\n      group: [\n        {\n          // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n          // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n          // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n          pattern:\n            /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n          alias: 'punctuation',\n          inside: {\n            'group-name': groupName\n          }\n        },\n        {\n          pattern: /\\)/,\n          alias: 'punctuation'\n        }\n      ],\n      quantifier: {\n        pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n        alias: 'number'\n      },\n      alternation: {\n        pattern: /\\|/,\n        alias: 'keyword'\n      }\n    }\n  })(Prism)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../node_modules/refractor/lang/regex.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}}],"sources":{"../../node_modules/refractor/lang/regex.js":"'use strict'\n\nmodule.exports = regex\nregex.displayName = 'regex'\nregex.aliases = []\nfunction regex(Prism) {\n  ;(function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    }\n    var escape =\n      /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/\n    var charClass = {\n      pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    }\n    var charClassWithoutDot = {\n      pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    }\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')'\n    var range = RegExp(rangeChar + '-' + rangeChar) // the name of a capturing group\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    }\n    Prism.languages.regex = {\n      charset: {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'charset-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          'charset-punctuation': {\n            pattern: /^\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': {\n                pattern: /-/,\n                alias: 'operator'\n              }\n            }\n          },\n          'special-escape': specialEscape,\n          charclass: charClassWithoutDot,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      charclass: charClass,\n      backreference: [\n        {\n          // a backreference which is not an octal escape\n          pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n          alias: 'keyword'\n        },\n        {\n          pattern: /\\\\k<[^<>']+>/,\n          alias: 'keyword',\n          inside: {\n            'group-name': groupName\n          }\n        }\n      ],\n      anchor: {\n        pattern: /[$^]|\\\\[ABbGZz]/,\n        alias: 'function'\n      },\n      escape: escape,\n      group: [\n        {\n          // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n          // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n          // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n          pattern:\n            /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n          alias: 'punctuation',\n          inside: {\n            'group-name': groupName\n          }\n        },\n        {\n          pattern: /\\)/,\n          alias: 'punctuation'\n        }\n      ],\n      quantifier: {\n        pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n        alias: 'number'\n      },\n      alternation: {\n        pattern: /\\|/,\n        alias: 'keyword'\n      }\n    }\n  })(Prism)\n}\n"},"lineCount":107}},"error":null,"hash":"13e9599b145c88be9f846e1803606686","cacheData":{"env":{}}}